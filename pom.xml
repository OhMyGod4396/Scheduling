<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.13.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>scheduling</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>scheduling</name>
    <description>scheduling</description>
    <properties>
        <java.version>8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.16</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--docker-maven-plugin插件打包-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--将插件绑定在package这个phase上，也就是说，用户只需要执行mvn package,就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定生成的镜像名-->
                    <imageName>${project.artifactId}</imageName>
                    <!--指定标签-->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <!--指定Dockerfile 的位置,${project.basedir}:项目的根路径下-->
                    <dockerDirectory>${project.basedir}src/main/resources/docker</dockerDirectory>
                    <!--指定远程docker api地址-->
                    <dockerHost>http://192.168.6.178:2375</dockerHost>
                    <resources>
                        <resource>
                            <!--容器中自定义jar包存放的位置，及对应的target目录-->
                            <targetPath>/</targetPath>
                            <!--本地jar包所在路径-->
                            <directory>${project.build.directory}</directory>
                            <!--需要包含本地jar包名称，对应的是Dockerfile中添加的文件名-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <!--以下两行是为了docker push到DockerHub使用的-->
                    <!--<serverId>docker-hub</serverId>
    <registryUrl>https://index.docker.io/v1</registryUrl>-->
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
